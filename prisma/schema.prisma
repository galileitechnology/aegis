generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String?    @unique
  username  String     @unique
  name      String
  password  String
  Schedule  Schedule[]
  RoomUser  RoomUser[]
  Message   Message[]

  @@map("users")
}

model Chart {
  id     Int    @id @default(autoincrement())
  titulo String
  dados  Data[]
}

model Data {
  id      Int    @id @default(autoincrement())
  title   String
  chartId Int
  content Chart  @relation(fields: [chartId], references: [id])
}

model Room {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  users    RoomUser[]
  messages Message[]

  @@map("rooms")
}

model RoomUser {
  id       Int      @id @default(autoincrement())
  roomId   Int
  userId   Int
  joinedAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_users")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  roomId    Int
  userId    Int
  content   String

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Schedule {
  id            Int      @id @default(autoincrement())
  typeId        Int
  userId        Int
  description   String
  scheduledDate DateTime
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cityId        Int
  googleEventId String?
  user          User     @relation(fields: [userId], references: [id])

  @@map("schedules")
}
